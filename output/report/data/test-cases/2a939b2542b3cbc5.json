{
  "uid" : "2a939b2542b3cbc5",
  "name" : "test_shenpi",
  "fullName" : "test_shenqingproduct.Test_ShenQingProduct#test_shenpi",
  "historyId" : "41c908704775aade111e5dec2e97558d",
  "time" : {
    "start" : 1686300994191,
    "stop" : 1686301034651,
    "duration" : 40460
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x00C6A813+48355]\n\t(No symbol) [0x00BFC4B1]\n\t(No symbol) [0x00B05220]\n\t(No symbol) [0x00B27C7C]\n\t(No symbol) [0x00B4A636]\n\t(No symbol) [0x00B470CD]\n\t(No symbol) [0x00B46B3A]\n\t(No symbol) [0x00AE5311]\n\t(No symbol) [0x00AE571E]\n\t(No symbol) [0x00AE5AFA]\n\tGetHandleVerifier [0x00ECAABD+2539405]\n\tGetHandleVerifier [0x00F0A78F+2800735]\n\tGetHandleVerifier [0x00F0456C+2775612]\n\tGetHandleVerifier [0x00CF51E0+616112]\n\t(No symbol) [0x00C05F8C]\n\t(No symbol) [0x00AE4F64]\n\t(No symbol) [0x00AE4912]\n\tGetHandleVerifier [0x00F3159C+2959980]\n\tBaseThreadInitThunk [0x771000C9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77CE7B4E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77CE7B1E+238]",
  "statusTrace" : "self = <case.test_shenqingproduct.Test_ShenQingProduct object at 0x00000195903B39B0>\n\n    def test_shenpi(self):\n        wd = webdriver.Chrome()\n        wd.maximize_window()\n        wd.get('http://18.0.142.184:8769/ind_net_fvue/index')\n        # time.sleep(3)\n        wd.implicitly_wait(30)\n        try:\n            loginelement = wd.find_element(By.XPATH, '//*[@id=\"app\"]/section/div/div[1]/div/ul/div[2]/li[4]/div/span')\n            # //*[@id=\"app\"]/section/div/div[1]/div/ul/div[2]/li[4]/div/span\n        except NoSuchElementException:\n            print('没有登录这个元素')\n        loginelement.click()\n        wd.find_element(By.XPATH,\n                        '//*[@id=\"app\"]/section/section/main/div/div/div/div/form/div[2]/div/div/input').send_keys(\n            '013700270075')\n        wd.find_element(By.XPATH,\n                        '//*[@id=\"app\"]/section/section/main/div/div/div/div/form/div[3]/div/div[1]/input').send_keys(\n            'Indnet123&')\n        wd.find_element(By.XPATH, '//*[@id=\"app\"]/section/section/main/div/div/div/div/form/div[4]/button').click()\n        time.sleep(3)\n        try:\n            wd.find_element(By.XPATH,'//*[@id=\"app\"]/section/main/div/div/div/div[1]/div[1]/div/div/div/div[2]/div[2]/div[1]/div[4]/div[2]/table/tbody/tr/td[6]/div/button').click()\n        except NoSuchElementException:\n            wd.close()\n        time.sleep(1)\n>       handles=wd.window_handles\n\ntest_shenqingproduct.py:124: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:587: in window_handles\n    return self.execute(Command.W3C_GET_WINDOW_HANDLES)[\"value\"]\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001958F2E4128>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"Backtrac...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77CE7B4E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77CE7B1E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x00C6A813+48355]\nE       \t(No symbol) [0x00BFC4B1]\nE       \t(No symbol) [0x00B05220]\nE       \t(No symbol) [0x00B27C7C]\nE       \t(No symbol) [0x00B4A636]\nE       \t(No symbol) [0x00B470CD]\nE       \t(No symbol) [0x00B46B3A]\nE       \t(No symbol) [0x00AE5311]\nE       \t(No symbol) [0x00AE571E]\nE       \t(No symbol) [0x00AE5AFA]\nE       \tGetHandleVerifier [0x00ECAABD+2539405]\nE       \tGetHandleVerifier [0x00F0A78F+2800735]\nE       \tGetHandleVerifier [0x00F0456C+2775612]\nE       \tGetHandleVerifier [0x00CF51E0+616112]\nE       \t(No symbol) [0x00C05F8C]\nE       \t(No symbol) [0x00AE4F64]\nE       \t(No symbol) [0x00AE4912]\nE       \tGetHandleVerifier [0x00F3159C+2959980]\nE       \tBaseThreadInitThunk [0x771000C9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77CE7B4E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77CE7B1E+238]\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: InvalidSessionIdException",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "_session_faker",
    "time" : {
      "start" : 1686300979759,
      "stop" : 1686300979816,
      "duration" : 57
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "suite",
    "value" : "test_shenqingproduct"
  }, {
    "name" : "subSuite",
    "value" : "Test_ShenQingProduct"
  }, {
    "name" : "host",
    "value" : "mrzhai"
  }, {
    "name" : "thread",
    "value" : "15356-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_shenqingproduct"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "2a939b2542b3cbc5.json",
  "parameterValues" : [ ]
}