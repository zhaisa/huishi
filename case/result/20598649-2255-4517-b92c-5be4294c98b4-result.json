{"name": "test_shenqingproduct[username1]", "status": "broken", "statusDetails": {"message": "TypeError: sequence item 0: expected str instance, int found", "trace": "self = <case.test_shenqingproduct.Test_ShenQingProduct object at 0x00000195903B3550>\nusername = (1594015829,)\n\n    @pytest.mark.parametrize(\"username\",reda_pytestdata(yamlfile, 'test_shenqingproduct'))\n    def test_shenqingproduct(self,username):\n        wd = webdriver.Chrome()\n        wd.maximize_window()\n        wd.get('http://18.0.142.184:8769/ind_net_fvue/index')\n        #time.sleep(3)\n        wd.implicitly_wait(30)\n        try:\n            loginelement = wd.find_element(By.XPATH, '//*[@id=\"app\"]/section/div/div[1]/div/ul/div[2]/li[4]/div/span')\n            # //*[@id=\"app\"]/section/div/div[1]/div/ul/div[2]/li[4]/div/span\n        except NoSuchElementException:\n            print('没有登录这个元素')\n        loginelement.click()\n>       wd.find_element(By.XPATH,'//*[@id=\"app\"]/section/section/main/div/div/div/div/form/div[2]/div/div/input').send_keys(username)\n\ntest_shenqingproduct.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"57983e41e0c2c68e2905c232d7b6f515\", element=\"40E1CC559A659EB572D1A6D644418853_element_19\")>\nvalue = ((1594015829,),)\n\n    def send_keys(self, *value) -> None:\n        \"\"\"Simulates typing into the element.\n    \n        :Args:\n            - value - A string for typing, or setting form fields.  For setting\n              file inputs, this could be a local file path.\n    \n        Use this to send simple key events or to fill out form fields::\n    \n            form_textfield = driver.find_element(By.NAME, 'username')\n            form_textfield.send_keys(\"admin\")\n    \n        This can also be used to set file inputs.\n    \n        ::\n    \n            file_input = driver.find_element(By.NAME, 'profilePic')\n            file_input.send_keys(\"path/to/profilepic.gif\")\n            # Generally it's better to wrap the file path in one of the methods\n            # in os.path to return the actual path to support cross OS testing.\n            # file_input.send_keys(os.path.abspath(\"path/to/profilepic.gif\"))\n        \"\"\"\n        # transfer file to another machine only if remote driver is used\n        # the same behaviour as for java binding\n        if self.parent._is_remote:\n            local_files = list(\n                map(\n                    lambda keys_to_send: self.parent.file_detector.is_local_file(str(keys_to_send)),\n                    \"\".join(map(str, value)).split(\"\\n\"),\n                )\n            )\n            if None not in local_files:\n                remote_files = []\n                for file in local_files:\n                    remote_files.append(self._upload(file))\n                value = \"\\n\".join(remote_files)\n    \n        self._execute(\n>           Command.SEND_KEYS_TO_ELEMENT, {\"text\": \"\".join(keys_to_typing(value)), \"value\": keys_to_typing(value)}\n        )\nE       TypeError: sequence item 0: expected str instance, int found\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:231: TypeError"}, "parameters": [{"name": "username", "value": "(1594015829,)"}], "start": 1686300985833, "stop": 1686300992008, "uuid": "a9d1b0b4-8cd6-49c1-a740-83ee9c47a7c6", "historyId": "07dd85289d81802a8346e72b62dd2411", "testCaseId": "1ff74ae6537aa307969907edef94a7d5", "fullName": "test_shenqingproduct.Test_ShenQingProduct#test_shenqingproduct", "labels": [{"name": "suite", "value": "test_shenqingproduct"}, {"name": "subSuite", "value": "Test_ShenQingProduct"}, {"name": "host", "value": "mrzhai"}, {"name": "thread", "value": "15356-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_shenqingproduct"}]}