{"name": "test_answerquestion[content0]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchFrameException: Message: tinymceId16_ifr", "trace": "self = <selenium.webdriver.remote.switch_to.SwitchTo object at 0x000002901A9896D8>\nframe_reference = 'tinymceId16_ifr'\n\n    def frame(self, frame_reference) -> None:\n        \"\"\"Switches focus to the specified frame, by index, name, or\n        webelement.\n    \n        :Args:\n         - frame_reference: The name of the window to switch to, an integer representing the index,\n                            or a webelement that is an (i)frame to switch to.\n    \n        :Usage:\n            ::\n    \n                driver.switch_to.frame('frame_name')\n                driver.switch_to.frame(1)\n                driver.switch_to.frame(driver.find_elements(By.TAG_NAME, \"iframe\")[0])\n        \"\"\"\n        if isinstance(frame_reference, str):\n            try:\n>               frame_reference = self._driver.find_element(By.ID, frame_reference)\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\switch_to.py:85: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"f7cbc946824957fea65305e2f28910ae\")>\nby = 'css selector', value = '[id=\"tinymceId16_ifr\"]'\n\n    def find_element(self, by=By.ID, value: Optional[str] = None) -> WebElement:\n        \"\"\"Find an element given a By strategy and locator.\n    \n        :Usage:\n            ::\n    \n                element = driver.find_element(By.ID, 'foo')\n    \n        :rtype: WebElement\n        \"\"\"\n        if isinstance(by, RelativeBy):\n            elements = self.find_elements(by=by, value=value)\n            if not elements:\n                raise NoSuchElementException(f\"Cannot locate relative element with: {by.root}\")\n            return elements[0]\n    \n        if by == By.ID:\n            by = By.CSS_SELECTOR\n            value = f'[id=\"{value}\"]'\n        elif by == By.CLASS_NAME:\n            by = By.CSS_SELECTOR\n            value = f\".{value}\"\n        elif by == By.NAME:\n            by = By.CSS_SELECTOR\n            value = f'[name=\"{value}\"]'\n    \n>       return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:830: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"f7cbc946824957fea65305e2f28910ae\")>\ndriver_command = 'findElement'\nparams = {'using': 'css selector', 'value': '[id=\"tinymceId16_ifr\"]'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002901A933BE0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77C87B6E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77C87B3E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"[id=\"tinymceId16_ifr\"]\"}\nE         (Session info: chrome=112.0.5615.138)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x00CEDCE3+50899]\nE       \t(No symbol) [0x00C7E111]\nE       \t(No symbol) [0x00B85588]\nE       \t(No symbol) [0x00BB08F9]\nE       \t(No symbol) [0x00BB0AFB]\nE       \t(No symbol) [0x00BDF902]\nE       \t(No symbol) [0x00BCB944]\nE       \t(No symbol) [0x00BDE01C]\nE       \t(No symbol) [0x00BCB6F6]\nE       \t(No symbol) [0x00BA7708]\nE       \t(No symbol) [0x00BA886D]\nE       \tGetHandleVerifier [0x00F53EAE+2566302]\nE       \tGetHandleVerifier [0x00F892B1+2784417]\nE       \tGetHandleVerifier [0x00F8327C+2759788]\nE       \tGetHandleVerifier [0x00D85740+672048]\nE       \t(No symbol) [0x00C88872]\nE       \t(No symbol) [0x00C841C8]\nE       \t(No symbol) [0x00C842AB]\nE       \t(No symbol) [0x00C771B7]\nE       \tBaseThreadInitThunk [0x773A0099+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77C87B6E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77C87B3E+238]\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <selenium.webdriver.remote.switch_to.SwitchTo object at 0x000002901A9896D8>\nframe_reference = 'tinymceId16_ifr'\n\n    def frame(self, frame_reference) -> None:\n        \"\"\"Switches focus to the specified frame, by index, name, or\n        webelement.\n    \n        :Args:\n         - frame_reference: The name of the window to switch to, an integer representing the index,\n                            or a webelement that is an (i)frame to switch to.\n    \n        :Usage:\n            ::\n    \n                driver.switch_to.frame('frame_name')\n                driver.switch_to.frame(1)\n                driver.switch_to.frame(driver.find_elements(By.TAG_NAME, \"iframe\")[0])\n        \"\"\"\n        if isinstance(frame_reference, str):\n            try:\n                frame_reference = self._driver.find_element(By.ID, frame_reference)\n            except NoSuchElementException:\n                try:\n>                   frame_reference = self._driver.find_element(By.NAME, frame_reference)\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\switch_to.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"f7cbc946824957fea65305e2f28910ae\")>\nby = 'css selector', value = '[name=\"tinymceId16_ifr\"]'\n\n    def find_element(self, by=By.ID, value: Optional[str] = None) -> WebElement:\n        \"\"\"Find an element given a By strategy and locator.\n    \n        :Usage:\n            ::\n    \n                element = driver.find_element(By.ID, 'foo')\n    \n        :rtype: WebElement\n        \"\"\"\n        if isinstance(by, RelativeBy):\n            elements = self.find_elements(by=by, value=value)\n            if not elements:\n                raise NoSuchElementException(f\"Cannot locate relative element with: {by.root}\")\n            return elements[0]\n    \n        if by == By.ID:\n            by = By.CSS_SELECTOR\n            value = f'[id=\"{value}\"]'\n        elif by == By.CLASS_NAME:\n            by = By.CSS_SELECTOR\n            value = f\".{value}\"\n        elif by == By.NAME:\n            by = By.CSS_SELECTOR\n            value = f'[name=\"{value}\"]'\n    \n>       return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:830: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"f7cbc946824957fea65305e2f28910ae\")>\ndriver_command = 'findElement'\nparams = {'using': 'css selector', 'value': '[name=\"tinymceId16_ifr\"]'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002901A933BE0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77C87B6E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77C87B3E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"[name=\"tinymceId16_ifr\"]\"}\nE         (Session info: chrome=112.0.5615.138)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x00CEDCE3+50899]\nE       \t(No symbol) [0x00C7E111]\nE       \t(No symbol) [0x00B85588]\nE       \t(No symbol) [0x00BB08F9]\nE       \t(No symbol) [0x00BB0AFB]\nE       \t(No symbol) [0x00BDF902]\nE       \t(No symbol) [0x00BCB944]\nE       \t(No symbol) [0x00BDE01C]\nE       \t(No symbol) [0x00BCB6F6]\nE       \t(No symbol) [0x00BA7708]\nE       \t(No symbol) [0x00BA886D]\nE       \tGetHandleVerifier [0x00F53EAE+2566302]\nE       \tGetHandleVerifier [0x00F892B1+2784417]\nE       \tGetHandleVerifier [0x00F8327C+2759788]\nE       \tGetHandleVerifier [0x00D85740+672048]\nE       \t(No symbol) [0x00C88872]\nE       \t(No symbol) [0x00C841C8]\nE       \t(No symbol) [0x00C842AB]\nE       \t(No symbol) [0x00C771B7]\nE       \tBaseThreadInitThunk [0x773A0099+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77C87B6E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77C87B3E+238]\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <case.test_answerquestion.Test_Answerquestion object at 0x000002901A9768D0>\ncontent = ('python',)\n\n    @pytest.mark.parametrize(\"content\",reda_pytestdata(yamlfile, 'test_answerquestion'))\n    def test_answerquestion(self,content):\n    \n        wd=webdriver.Chrome()\n        wd.maximize_window()\n        wd.get('http://10.22.33.101:32752/ind_net_fvue/index')\n        time.sleep(1)\n        try:\n            loginelement=wd.find_element(By.XPATH,'//*[@id=\"app\"]/section/div/div[1]/div/ul/div[2]/li[4]/div/span')\n            #//*[@id=\"app\"]/section/div/div[1]/div/ul/div[2]/li[4]/div/span\n        except NoSuchElementException:\n            print('没有登录这个元素')\n        loginelement.click()\n        # handles=wd.window_handles\n        # wd.switch_to.window(handles[1])\n        # print(wd.current_url)\n        wd.find_element(By.XPATH,'//*[@id=\"app\"]/section/section/main/div/div/div/div/form/div[2]/div/div[1]/input').send_keys('admin')\n        wd.find_element(By.XPATH,'//*[@id=\"app\"]/section/section/main/div/div/div/div/form/div[3]/div/div[1]/input').send_keys('Indnet123&')\n        wd.find_element(By.XPATH,'//*[@id=\"app\"]/section/section/main/div/div/div/div/form/div[4]/button').click()\n        time.sleep(2)\n        wd.find_element(By.XPATH,'//*[@id=\"app\"]/section/header/div/div[1]/div[1]/img').click()\n        time.sleep(2)\n        e1=wd.find_element(By.XPATH,'//*[@id=\"app\"]/section/div/div[1]/div/ul/div[1]/li[6]/span/span')\n        e1.click()\n        time.sleep(2)\n    \n        wd.find_element(By.XPATH,'//div[@class=\"nav\"]/div[2]/div[4]').click()#自己写的相对路径，点击问题反馈\n        wd.find_element(By.CLASS_NAME,'submit').click()\n        time.sleep(3)\n        wd.find_element(By.XPATH,'//*[@id=\"app\"]/section/div/form/div[1]/div/div/label[1]/span[1]/span').click()\n        wd.find_element(By.XPATH,'//*[@id=\"app\"]/section/div/form/div[2]/div/div/input').send_keys(\"如何正确安装MYSQL\")\n        e1=wd.find_element(By.XPATH,'//*[@id=\"app\"]/section/div/form/div[3]/div/div/div[1]/input')\n        e1.click()\n        time.sleep(3)\n        e3=wd.find_element(By.XPATH,'//div[@role=\"menu\"][1]')\n        e3.click()\n        e2 = e3.get_attribute('id')\n        print(e2)\n        str1 = '//*[@id='\n        str2 = ']/div/ul/li[1]'\n        jsxpath = str1 + '\"' + e2 + '\"' + str2\n        print(jsxpath)\n        wd.find_element(By.XPATH,jsxpath).click()\n        time.sleep(2)\n        e4=wd.find_element(By.XPATH,'//div[@role=\"menu\"][2]')\n        e4.click()\n        e5=e4.get_attribute('id')\n        jsxpath2=str1 + '\"' + e5 + '\"' + str2\n    \n        wd.find_element(By.XPATH,jsxpath2).click()\n>       wd.switch_to.frame(\"tinymceId16_ifr\")\n\ntest_answerquestion.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.switch_to.SwitchTo object at 0x000002901A9896D8>\nframe_reference = 'tinymceId16_ifr'\n\n    def frame(self, frame_reference) -> None:\n        \"\"\"Switches focus to the specified frame, by index, name, or\n        webelement.\n    \n        :Args:\n         - frame_reference: The name of the window to switch to, an integer representing the index,\n                            or a webelement that is an (i)frame to switch to.\n    \n        :Usage:\n            ::\n    \n                driver.switch_to.frame('frame_name')\n                driver.switch_to.frame(1)\n                driver.switch_to.frame(driver.find_elements(By.TAG_NAME, \"iframe\")[0])\n        \"\"\"\n        if isinstance(frame_reference, str):\n            try:\n                frame_reference = self._driver.find_element(By.ID, frame_reference)\n            except NoSuchElementException:\n                try:\n                    frame_reference = self._driver.find_element(By.NAME, frame_reference)\n                except NoSuchElementException:\n>                   raise NoSuchFrameException(frame_reference)\nE                   selenium.common.exceptions.NoSuchFrameException: Message: tinymceId16_ifr\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\switch_to.py:90: NoSuchFrameException"}, "attachments": [{"name": "stdout", "source": "125ffbd2-d21c-4e77-8730-f6ffc81e0514-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "content", "value": "('python',)"}], "start": 1683946854077, "stop": 1683946881013, "uuid": "869509e7-c7ac-464c-a6a3-b898e962b750", "historyId": "a3587e44e0e4ba925454d7b01b1c9365", "testCaseId": "3fdb22af7c7973550c0975371dd3e7ed", "fullName": "test_answerquestion.Test_Answerquestion#test_answerquestion", "labels": [{"name": "suite", "value": "test_answerquestion"}, {"name": "subSuite", "value": "Test_Answerquestion"}, {"name": "host", "value": "mrzhai"}, {"name": "thread", "value": "34540-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_answerquestion"}]}